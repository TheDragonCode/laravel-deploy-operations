<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
    SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
    title="Database Data Dumper" id="database-data-dumper">

    <link-summary>Adding data from certain tables when executing the `php artisan schema:dump` console command</link-summary>
    <card-summary>Adding data from certain tables when executing the `php artisan schema:dump` console command</card-summary>
    <web-summary>Adding data from certain tables when executing the `php artisan schema:dump` console command</web-summary>

    <show-structure depth="2" />

    <p>
        As you build your application, you may accumulate more and more migrations over time.
        This can lead to your
        <code>database/migrations</code> directory becoming bloated with potentially hundreds of migrations.
        If you would like, you may "squash" your migrations into a single SQL file.
        To get started, execute the <code>schema:dump</code> command:
    </p>

    <code-block lang="bash">
        %artisan% schema:dump
    </code-block>

    <p>
        You can read more about the operation of this console command in the
        <a href="https://laravel.com/docs/migrations#squashing-migrations">Laravel documentation</a>.
    </p>

    <p>
        Here we mention this console command because operations tend to save the execution state in order to prevent re-runs where this is not explicitly allowed.
        But if you run sequentially the console commands <code>%artisan% schema:dump</code> and
        <code>%artisan% migrate:fresh</code>, you will see that all actions will be called again.
    </p>

    <p>
        This is due to the fact that the dump mechanism saves the contents of just one table - <code>migrations</code>.
    </p>

    <p>
        To solve this problem, there is a
        <a href="https://github.com/TheDragonCode/laravel-data-dumper">Database Data Dumper</a>
        project that allows you to specify a list of tables required for export to a dump.
    </p>

    <p>
        In addition to those that you can easily specify in its configuration file,
        we recommend that you also specify the
        <code>operations</code> database table from this project in order to save the state of the operations when performing a clean deployment of the database from a dump.
    </p>

    <code-block lang="bash">
        composer require dragon-code/laravel-data-dumper --dev
    </code-block>
</topic>
