import{_ as s,c as a,b as e,o as t}from"./app-DbZK4p7a.js";const i={};function p(o,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="basic-usage" tabindex="-1"><a class="header-anchor" href="#basic-usage"><span>Basic Usage</span></a></h1><p>Create your first operation using <code>make:operation</code> command and define the actions it should perform.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">php artisan make:operation</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This action will create a new file in the <code>/operations</code> folder of your application.</p><p>If you are using the <code>git</code> version control system, the name of the currently active branch will be used as the file name suffix, otherwise the word <code>auto</code> will be used.</p><p>You can also specify a name for the file yourself by specifying it with the first argument. For example, <code>php artisan make:operation qwerty</code>.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Article</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">DragonCode<span class="token punctuation">\\</span>LaravelDeployOperations<span class="token punctuation">\\</span>Operation</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">extends</span> <span class="token class-name">Operation</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name static-context">Article</span><span class="token operator">::</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">lazyById</span><span class="token punctuation">(</span><span class="token argument-name">chunkSize</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token argument-name">column</span><span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token property">each</span><span class="token operator">-&gt;</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;is_active&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// and/or any actions...</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, To run operations, execute the <code>operations</code> artisan command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">php artisan operations</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The order in which operations are called is checked by file name in alphabetical order, without taking into account directory names:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># actual file names</span></span>
<span class="line">2022_10_14_000001_test1      <span class="token comment"># 1</span></span>
<span class="line">2022_10_14_000004_test4      <span class="token comment"># 4</span></span>
<span class="line">bar/2022_10_14_000003_test3  <span class="token comment"># 3</span></span>
<span class="line">foo/2022_10_14_000002_test2  <span class="token comment"># 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># order of running operations at startup</span></span>
<span class="line">2022_10_14_000001_test1      <span class="token comment"># 1</span></span>
<span class="line">foo/2022_10_14_000002_test2  <span class="token comment"># 2</span></span>
<span class="line">bar/2022_10_14_000003_test3  <span class="token comment"># 3</span></span>
<span class="line">2022_10_14_000004_test4      <span class="token comment"># 4</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In addition to other options described in the &quot;Guide&quot; section, you can divide the execution of operations into &quot;before&quot; and &quot;after&quot; certain actions. For example, before and after restarting the queues:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">php artisan operations <span class="token parameter variable">--before</span></span>
<span class="line">php artisan queue:restart</span>
<span class="line">php artisan operations</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14)]))}const c=s(i,[["render",p],["__file","basic.html.vue"]]),r=JSON.parse('{"path":"/guide/basic.html","title":"Basic Usage","lang":"en-US","frontmatter":{"description":"Basic Usage Create your first operation using make:operation command and define the actions it should perform. This action will create a new file in the /operations folder of yo...","head":[["meta",{"property":"og:url","content":"https://deploy-operations.dragon-code.pro/guide/basic.html"}],["meta",{"property":"og:site_name","content":"Laravel Deploy Operations"}],["meta",{"property":"og:title","content":"Basic Usage"}],["meta",{"property":"og:description","content":"Basic Usage Create your first operation using make:operation command and define the actions it should perform. This action will create a new file in the /operations folder of yo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-07-15T18:43:48.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-15T18:43:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Basic Usage\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-15T18:43:48.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"updatedTime":1721069028000},"autoDesc":true,"filePathRelative":"guide/basic.md"}');export{c as comp,r as data};
